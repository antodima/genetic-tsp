- fork-join model is in the range of 10 to 100 μs on state of the art multicores.
- Xeon PHI KNL core takes around 120-160μs.
- i5 or e5 processor of the second last generation takes 50-70μs.

---------------------------------------------------------------

VTUNE:
	sudo sh -c 'echo 0 >/proc/sys/kernel/perf_event_paranoid'
	sudo sh -c 'echo 0 >/proc/sys/kernel/kptr_restrict'
	sudo sh -c 'echo 0 >/proc/sys/kernel/yama/ptrace_scope'
	sudo /home/anto/intel/vtune_profiler/bin64/vtune-gui

---------------------------------------------------------------

- Results of times.sh on my machine (./times.sh):
	Creation average time 		= 92 	microseconds
	Breeding average time 		= 1793 	microseconds
	- Crossover average time 	= 1 	microseconds
	- Mutation average time 	= 0.1 	microseconds
	- Adding average time 		= 0.2 	microseconds
	Ranking average time 		= 3294 	microseconds

---------------------------------------------------------------

- Times (./times.sh):
    Tc = Creation time  = 92
    Tb = Breeding time  = 1793
    Tr = Ranking time   = 3294

---------------------------------------------------------------

- Amdahl analysis:
    n   = number of generations
    ts  = Tc = 92				     (serial time)
    tp  = n * (Tb + Tr) = n * 5087   (parallel time)

            ts               92
    f = ----------- = -----------------     	(serial fraction)
          ts + tp      92 + (n * 5087)

                        Tseq
    sp(nw) = --------------------------------   (ideal speedup)
             f * Tseq + [(1 - f) * Tseq] / nw
    
---------------------------------------------------------------

rplsh> breed = seq(86)
rplsh> rank = seq(1628)
rplsh> main = pipe(breed,rank)
rplsh> rewrite main with allrules, allrules
rplsh> optimize main with farmopt, pipeopt, maxresources
rplsh> show main by servicetime, resources +5
122.428571	16	 [4] : farm(comp(breed,rank)) with [ nw: 14]	
122.428571	16	[16] : comp(farm(breed) with [ nw: 14],farm(rank) with [ nw: 14])	
125.230769	16	 [5] : pipe(breed,farm(rank) with [ nw: 13])	
148.000000	16	 [1] : pipe(breed,farm(farm(rank) with [ nw: 11]) with [ nw: 1])	
148.000000	16	 [9] : pipe(farm(breed) with [ nw: 1],farm(rank) with [ nw: 11])	

---------------------------------------------------------------

- Experiments on dell:

(1) >> ./speedup.sh 1000

	Number of cores = 4
	Population size = 1000
	Number of generations = 1
	Number of cities = 10

	Sequential time = 18950
	Serial fraction = 0.017764
	Speedup:
		Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
				1	       0.851073	       0.856575	       0.897296	              1
				2	        1.12543	        1.18475	        1.52724	        1.96509
				4	        1.71029	        1.77534	        1.67833	        3.79762

(2) >> ./speedup.sh 1000 10

	Number of cores = 4
	Population size = 1000
	Number of generations = 10
	Number of cities = 10

	Sequential time = 188731
	Serial fraction = 0.00180527
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.918435	       0.941349	       0.925606	              1
		      2	        1.66002	        1.68985	        1.12219	         1.9964
		      4	         1.6709	        2.14626	        2.09373	        3.97845

(3) >> ./speedup.sh 1000 20

	Number of cores = 4
	Population size = 1000
	Number of generations = 20
	Number of cities = 10

	Sequential time = 359317
	Serial fraction = 0.000903449
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.813205	       0.794346	       0.801019	              1
		      2	        1.39108	        1.39954	        1.69082	        1.99819
		      4	        1.72489	        1.80825	        1.74284	        3.98919

(4) >> ./speedup.sh 2000
	
	Number of cores = 4
	Population size = 2000
	Number of generations = 1
	Number of cities = 10

	Sequential time = 31977
	Serial fraction = 0.017764
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.811867	       0.869933	       0.883269	              1
		      2	        1.26028	        1.27939	        1.57553	        1.96509
		      4	        1.61313	        1.71275	        1.59749	        3.79762
(5) >> /speedup.sh 5000
	Number of cores = 4
	Population size = 5000
	Number of generations = 1
	Number of cities = 10
	
	Sequential time = 91368
	Serial fraction = 0.017764
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.739558	       0.899451	       0.882169	              1
		      2	        1.04453	        1.27052	        1.61805	        1.96509
		      4	         1.5548	        1.69965	        1.58161	        3.79762


- Experiments on phi19:

(1) >> LD_LIBRARY_PATH=/usr/local/lib64 ./speedup.sh 1000

	Number of cores = 256
	Population size = 1000
	Number of generations = 1
	Number of cities = 10

	Sequential time = 161114
	Serial fraction = 0.017764
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.757022	       0.789678	       0.821264	              1
		      2	        1.48496	        1.55376	        1.64263	        1.96509
		      4	        3.23743	        3.35165	        3.23665	        3.79762
		      8	        5.58628	        6.18385	        5.91526	        7.11523
		     16	        8.15313	         8.4203	         6.9353	        12.6336
		     32	        8.88415	        8.18004	        5.96233	        20.6361
		     64	        6.27635	        5.93378	        4.02413	         30.201
		    128	        3.95809	        3.85283	        2.23667	        39.3117
		    256	        2.11561	        2.08413	        1.16201	        46.2945



(2) >> LD_LIBRARY_PATH=/usr/local/lib64 ./speedup.sh 1000 10
	Number of cores = 256
	Population size = 1000
	Number of generations = 10
	Number of cities = 10

	Sequential time = 1558204
	Serial fraction = 0.00180527
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.803561	       0.810559	       0.814955	              1
		      2	         1.6548	        1.66809	        1.67186	         1.9964
		      4	        3.59791	           3.67	        3.63829	        3.97845
		      8	        7.47846	        8.00092	        7.86416	        7.90017
		     16	        14.2217	        15.0491	        16.1903	        15.5782
		     32	        23.4193	        23.2696	        24.7212	        30.3041
		     64	        14.4274	        14.3771	        26.8707	        57.4645
		    128	        7.51412	        7.55097	        20.2154	        104.127
		    256	        3.66139	        3.67091	        11.2603	        175.301

(3) >> LD_LIBRARY_PATH=/usr/local/lib64 ./speedup.sh 1000 20

	Number of cores = 256
	Population size = 1000
	Number of generations = 20
	Number of cities = 10

	Sequential time = 2931717
	Serial fraction = 0.000903449
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.804585	       0.806463	       0.811388	              1
		      2	        1.66047	        1.66301	        1.67032	        1.99819
		      4	        3.63413	        3.65031	        3.64861	        3.98919
		      8	        7.65118	        8.03507	        7.96522	        7.94972
		     16	        14.8984	        15.4823	        17.0902	        15.7861
		     32	         25.603	        25.3169	         28.891	        31.1282
		     64	        14.8072	        14.7705	        30.7292	        60.5535
		    128	         7.5413	        7.56014	        31.8849	        114.825
		    256	          3.798	        3.83627	        21.0397	        208.066
		    
(4) >> LD_LIBRARY_PATH=/usr/local/lib64 ./speedup.sh 2000

	Number of cores = 256
	Population size = 2000
	Number of generations = 1
	Number of cities = 10

	Sequential time = 344436
	Serial fraction = 0.017764
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.753454	       0.798881	       0.814576	              1
		      2	        1.48747	        1.61704	        1.60474	        1.96509
		      4	         3.0453	        3.33055	        3.19023	        3.79762
		      8	        5.68714	         6.2468	        5.92191	        7.11523
		     16	        9.25257	        10.5072	         9.6265	        12.6336
		     32	        11.9741	        10.7051	        9.67435	        20.6361
		     64	        11.4896	        10.0574	        7.71396	         30.201
		    128	        7.37519	        6.95957	        4.53211	        39.3117
		    256	        4.31657	         4.1597	        2.38415	        46.2945

(5) >> LD_LIBRARY_PATH=/usr/local/lib64 ./speedup.sh 5000

	Number of cores = 256
	Population size = 5000
	Number of generations = 1
	Number of cities = 10

	Sequential time = 932889
	Serial fraction = 0.017764
	Speedup:
	      Pardegree	    C++ Threads	 C++ Threads v2	       FastFlow	          Ideal
		      1	       0.719794	       0.793558	       0.793813	              1
		      2	        1.41493	        1.58475	        1.55758	        1.96509
		      4	        2.83275	        3.22042	        3.15464	        3.79762
		      8	         5.4739	        6.24574	        5.90533	        7.11523
		     16	        9.02825	        10.6509	        9.71962	        12.6336
		     32	        13.5466	        14.3158	        13.5786	        20.6361
		     64	        17.3014	        13.8417	         13.793	         30.201
		    128	        16.2987	        13.1153	        10.4463	        39.3117
		    256	        10.2289	        9.22219	        6.07049	        46.2945

---------------------------------------------------------------

