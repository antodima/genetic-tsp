- fork-join model is in the range of 10 to 100 μs on state of the art multicores.
- Xeon PHI KNL core takes around 120-160μs.
- i5 or e5 processor of the second last generation takes 50-70μs.

---------------------------------------------------------------

- Results of times.sh on my machine (sh/times.sh):
    Creation average time = 46
    Breeding average time = 86
    Ranking average time = 1628

- Results of times.sh on phi19 remote machine
  (LD_LIBRARY_PATH=/usr/local/lib64 sh/times.sh):
    Creation average time = 262
    Breeding average time = 461
    Ranking average time = 13585

---------------------------------------------------------------

- Times (./sh/times.sh):
    Tc = Creation time  = 46
    Tb = Breeding time  = 86
    Tr = Ranking time   = 1628

---------------------------------------------------------------

- Gustafsson analysis:
    n   = number of generations
    ts  = Tc = 46				         (serial time)
    tp  = n * (Tb + Tr) = n * 1714       (parallel time)

            ts              46
    f = ----------- = -----------------     	(serial fraction)
          ts + tp      46 + n * 1714

                        Tseq
    sp(nw) = --------------------------------   (ideal speedup)
             f * Tseq + [(1 - f) * Tseq] / nw
    
---------------------------------------------------------------

rplsh> breed = seq(86)
rplsh> rank = seq(1628)
rplsh> main = pipe(breed,rank)
rplsh> rewrite main with allrules, allrules
rplsh> optimize main with farmopt, pipeopt, maxresources
rplsh> show main by servicetime, resources +5
122.428571	16	 [4] : farm(comp(breed,rank)) with [ nw: 14]	
122.428571	16	[16] : comp(farm(breed) with [ nw: 14],farm(rank) with [ nw: 14])	
125.230769	16	 [5] : pipe(breed,farm(rank) with [ nw: 13])	
148.000000	16	 [1] : pipe(breed,farm(farm(rank) with [ nw: 11]) with [ nw: 1])	
148.000000	16	 [9] : pipe(farm(breed) with [ nw: 1],farm(rank) with [ nw: 11])	

---------------------------------------------------------------

- Experiments on dell:

(1) >> ./sh/speedup.sh 1000
	Number of cores = 4
	Population size = 1000
	Number of generations = 1
	Number of cities = 10
	Sequential time = 15260
	Serial fraction = 0.0261364
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	     0.74727	    0.880402	           1
		   2	    0.836531	     1.74102	     1.94906
		   4	    0.717611	     1.49286	     3.70917

(2) >> ./sh/speedup.sh 1000 10
	Number of cores = 4
	Population size = 1000
	Number of generations = 10
	Number of cities = 10
	Sequential time = 153029
	Serial fraction = 0.0026766
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	    0.752111	    0.863843	           1
		   2	    0.893146	      1.6211	     1.99466
		   4	    0.725074	     1.58369	     3.96814

(3) >> ./sh/speedup.sh 1000 20
	Number of cores = 4
	Population size = 1000
	Number of generations = 20
	Number of cities = 10
	Sequential time = 290156
	Serial fraction = 0.00134009
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	    0.779181	     0.84016	           1
		   2	    0.883098	     1.51184	     1.99732
		   4	    0.707661	     1.55068	     3.98398


- Experiments on phi19:

(1) >> LD_LIBRARY_PATH=/usr/local/lib64 sh/speedup.sh 1000
	Number of cores = 256
	Population size = 1000
	Number of generations = 1
	Number of cities = 10
	Sequential time = 163374
	Serial fraction = 0.0261364
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	    0.704687	    0.837373	           1
		   2	    0.795344	     1.63644	     1.94906
		   4	    0.920407	     3.24877	     3.70917
		   8	     1.03912	     5.96909	     6.76273
		  16	     1.04937	      7.1838	     11.4939
		  32	    0.899429	     6.14627	     17.6773
		  64	    0.851438	     4.15477	      24.182
		 128	    0.779642	     2.30888	     29.6343
		 256	    0.708667	     1.18282	     33.3995

(2) >> LD_LIBRARY_PATH=/usr/local/lib64 sh/speedup.sh 1000 10
	Number of cores = 256
	Population size = 1000
	Number of generations = 10
	Number of cities = 10
	Sequential time = 1554037
	Serial fraction = 0.0026766
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	    0.690675	    0.628668	           1
		   2	    0.825318	     1.46644	     1.99466
		   4	    0.933987	     2.91424	     3.96814
		   8	     1.05415	     5.62771	     7.85287
		  16	     1.16839	     8.96458	     15.3824
		  32	    0.862714	     7.35399	     29.5482
		  64	    0.821068	     4.65608	     54.7652
		 128	    0.775508	      2.3206	     95.5275
		 256	    0.767707	     1.29484	     152.152

(3) >> LD_LIBRARY_PATH=/usr/local/lib64 sh/speedup.sh 1000 20
	Number of cores = 256
	Population size = 1000
	Number of generations = 20
	Number of cities = 10
	Sequential time = 2929747
	Serial fraction = 0.00134009
	Speedup:
	Pardegree	 C++ Threads	    FastFlow	       Ideal
		   1	    0.664545	    0.733771	           1
		   2	    0.814018	     1.44799	     1.99732
		   4	    0.910874	      2.9926	     3.98398
		   8	     1.02095	     5.56504	     7.92565
		  16	     1.12625	     8.82946	     15.6847
		  32	    0.815376	     7.12631	     30.7237
		  64	    0.775027	     4.45778	     59.0174
		 128	    0.747349	       2.425	     109.384
		 256	    0.755664	     1.23868	     190.799

